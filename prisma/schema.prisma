// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  name      String
  email     String?  @unique
  role      String   @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?

  @@index([username])
  @@index([email])
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String?  @unique
  name      String
  avatar    String?
  bio       String?
  location  String?
  joinDate  DateTime @default(now())
  lastSeen  DateTime @default(now())
  isActive  Boolean  @default(true)
  
  // 통계
  totalLikes    Int @default(0)
  totalDislikes Int @default(0)
  totalPosts    Int @default(0)
  totalComments Int @default(0)
  
  // 관계
  bookmarks     Bookmark[]
  profile       UserProfile?
  notifications UserNotification[]
  uploads       FileUpload[]
  
  @@index([username])
  @@index([email])
}

model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String
  nickname    String     // DC인사이드 스타일 닉네임
  password    String     // DC인사이드 스타일 비밀번호
  type        String     @default("post") // "post", "discussion", "housing"
  marketTrend String?    // "up", "down", null
  isHot       Boolean    @default(false)
  isNew       Boolean    @default(true)
  isPopular   Boolean    @default(false)
  urgent      Boolean    @default(false)
  verified    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  upvotes     Int        @default(0)
  downvotes   Int        @default(0)
  views       Int        @default(0)
  commentCount Int       @default(0)
  adminPick   Boolean    @default(false)
  
  // 관계
  tags        PostTag[]
  comments    Comment[]
  likes       Like[]
  dislikes    Dislike[]
  bookmarks   Bookmark[]
  files       FileUpload[]

  @@index([createdAt])
  @@index([upvotes])
  @@index([adminPick])
  @@index([type])
  @@index([marketTrend])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    String
  postId    String
  parentId  String?  // 대댓글용
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 통계
  likes    Int @default(0)
  dislikes Int @default(0)
  upvotes  Int @default(0)
  downvotes Int @default(0)
  
  // 관계
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  commentLikes    CommentLike[]
  commentDislikes CommentDislike[]
  
  @@index([postId])
  @@index([author])
  @@index([createdAt])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  
  // 관계
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([postId])
}

model Dislike {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  
  // 관계
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([postId])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  
  // 관계
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model CommentDislike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  
  // 관계
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  
  // 관계
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())
  
  // 관계
  posts PostTag[]
  
  @@index([name])
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String
  
  // 관계
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model ContractGuide {
  id          String   @id @default(cuid())
  title       String
  category    String   // 'basics', 'documents', 'deposit', 'rights', 'disputes'
  difficulty  String   // '초급', '중급', '고급'
  readTime    String   // '3분', '5분', '8분' 등
  summary     String
  content     String
  downloads   Int      @default(0)
  rating      Float    @default(0)
  isNew       Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 관계
  tags        ContractGuideTag[]
  
  @@index([category])
  @@index([createdAt])
  @@index([isNew])
}

model ContractGuideTag {
  id        String @id @default(cuid())
  guideId   String
  name      String
  
  // 관계
  guide     ContractGuide @relation(fields: [guideId], references: [id], onDelete: Cascade)
  
  @@unique([guideId, name])
  @@index([guideId])
  @@index([name])
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general") // 'general', 'email', 'security', 'ui'
  isPublic    Boolean  @default(false) // 공개 설정인지 여부
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([category])
  @@index([isPublic])
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  type        String   @default("info") // 'info', 'warning', 'success', 'error'
  priority    String   @default("normal") // 'low', 'normal', 'high', 'urgent'
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([isActive])
  @@index([priority])
  @@index([startDate])
  @@index([endDate])
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  avatar      String?  // 프로필 이미지 URL
  location    String?  // 거주 지역
  phone       String?  // 연락처
  website     String?  // 개인 웹사이트
  socialLinks String?  // 소셜 미디어 링크들 (JSON 문자열)
  preferences String?  // 사용자 설정 (JSON 문자열)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 관계
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model UserNotification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 'comment', 'like', 'mention', 'system'
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      String?  // 추가 데이터 (JSON 문자열)
  createdAt DateTime @default(now())
  
  // 관계
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model FileUpload {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int      // 파일 크기 (바이트)
  path        String   // 서버 내 파일 경로
  url         String   // 접근 가능한 URL
  userId      String?  // 업로드한 사용자 (선택사항)
  postId      String?  // 연결된 게시글 (선택사항)
  type        String   @default("image") // 'image', 'document', 'video', 'audio'
  isPublic    Boolean  @default(true)   // 공개 여부
  createdAt   DateTime @default(now())
  
  // 관계
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([postId])
  @@index([type])
  @@index([isPublic])
  @@index([createdAt])
}